<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="/styles/home.css" />
    <link rel="stylesheet" href="/styles/plugins.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
    />
  </head>
  <body>
    <main>
      <section>
        <input
          type="text"
          id="search-input"
          placeholder="Search plugins by name..."
          style="
            color: black;
            width: 100%;
            padding: 12px 16px;
            font-size: 1rem;
            border-radius: 8px;
            border: 1px solid #ccc;
            margin-bottom: 30px;
            box-sizing: border-box;
          "
        />
      </section>
      <section id="popular-plugins">
        <h1 class="section-title">Popular Plugins</h1>
        <div class="plugin-list" id="popular-list"></div>
      </section>

      <section id="new-plugins">
        <h1 class="section-title">New Plugins</h1>
        <div class="plugin-list" id="new-list"></div>
      </section>

      <section id="all-plugins">
        <h1 class="section-title">All Plugins</h1>
        <div class="plugin-list" id="all-list"></div>
      </section>
    </main>
    <script>
      window.onload = function () {
        // Sample tags pool
        const sampleTags = [
          "Economy",
          "Moderation",
          "Voice",
          "Custom",
          "Music",
          "Fun",
          "Utility",
          "Admin",
          "Games",
        ];

        // fetch plugins
        let plugins = [];

        async function fetchPlugins() {
          try {
            const res = await fetch("/api/plugins");
            plugins = await res.json();
            console.log(plugins);
            renderPluginSections(plugins);
          } catch (err) {
            console.error("Error fetching plugins:", err);
          }
        }

        fetchPlugins();

        //       function createPluginCard(plugin) {
        //         const tagsHtml = plugin.tags
        //           .slice(0, 3)
        //           .map((tag) => `<span class="tag">${tag}</span>`)
        //           .join(" ");

        //         return `
        //   <div class="plugin-card">
        //     <img src="${plugin.image}" alt="${
        //           plugin.name
        //         } icon" class="plugin-icon" />
        //     <div class="badge">
        //       <i class="fa-solid fa-download"></i> ${formatDownloads(
        //         plugin.downloadCount
        //       )}&nbsp;&nbsp;
        //       ${plugin.rating || 0} <i class="fa-solid fa-star"></i>
        //     </div>
        //     <h2>${plugin.name}</h2>
        //     <div class="tags-container">${tagsHtml}</div>
        //     <p>${plugin.description}</p>
        //     <div class="plugin-actions">
        //       <a href="/plugins/${plugin.id}" class="learn-more">Learn More</a>
        //       <button class="install-btn" onclick="installPlugin(${
        //         plugin.id
        //       })">Install</button>
        //     </div>
        //   </div>
        // `;
        //       }
        function createPluginCard(plugin) {
          const tagsHtml = plugin.tags
            .slice(0, 3)
            .map((tag) => `<span class="tag">${tag}</span>`)
            .join(" ");

          // Diamond icon after plugin name if premium
          const diamondIcon = plugin.premium
            ? ` <i class="fa-solid fa-gem diamond-icon" title="Premium"></i>`
            : "";

          return `
    <div class="plugin-card ${plugin.premium ? "premium" : ""}">
      <img src="${plugin.image}" alt="${
            plugin.name
          } icon" class="plugin-icon" />
      <div class="badge">
        <i class="fa-solid fa-download"></i> ${formatDownloads(
          plugin.downloadCount
        )}&nbsp;&nbsp;
        ${plugin.rating || 0} <i class="fa-solid fa-star"></i>
      </div>
      <h2>${plugin.name}${diamondIcon}</h2>
      <div class="tags-container">${tagsHtml}</div>
      <p>${plugin.description}</p>
      <div class="plugin-actions">
        <a href="/plugins/${plugin.id}" class="learn-more">Learn More ></a>
      </div>
    </div>
  `;
        }

        function renderPluginSections(pluginData) {
          const popularPlugins = [...pluginData]
            .sort((a, b) => b.downloadCount - a.downloadCount)
            .slice(0, 20);
          const newPlugins = [...pluginData]
            .sort((a, b) => b.createdAt - a.createdAt)
            .slice(0, 20);
          const allPlugins = [...pluginData].sort(() => Math.random() - 0.5);

          document.getElementById("popular-list").innerHTML = popularPlugins
            .map(createPluginCard)
            .join("");
          document.getElementById("new-list").innerHTML = newPlugins
            .map(createPluginCard)
            .join("");
          document.getElementById("all-list").innerHTML = allPlugins
            .map(createPluginCard)
            .join("");
        }

        function formatDownloads(num) {
          if (num >= 1_000_000) {
            return (
              (num / 1_000_000).toFixed(num % 1_000_000 === 0 ? 0 : 1) + "M"
            );
          } else if (num >= 1_000) {
            return (num / 1_000).toFixed(num % 1_000 === 0 ? 0 : 1) + "K";
          } else {
            return num.toString();
          }
        }

        // Search input event handlers
        const searchInput = document.getElementById("search-input");

        searchInput.addEventListener("keydown", (e) => {
          if (e.key === "Enter") {
            e.preventDefault();
            const query = e.target.value.toLowerCase().trim();
            if (!query) {
              return renderPluginSections(plugins);
            }

            const filteredPlugins = plugins.filter((plugin) =>
              plugin.name.toLowerCase().includes(query)
            );
            renderPluginSections(filteredPlugins);
          }
        });

        // Initial render of all plugins on page load
        renderPluginSections(plugins);
      };
    </script>
  </body>
</html>
